import os
import cv2
import random
import torch
import detectron2
from detectron2.engine import DefaultPredictor
from detectron2.config import get_cfg
from detectron2.data import MetadataCatalog, DatasetCatalog
from detectron2.utils.visualizer import Visualizer
from detectron2.model_zoo import model_zoo

def visualize_predictions(checkpoint_path, image_dir, output_dir, dataset_name="graffiti_validation"):
    """
    Visualizes predictions from a Detectron2 model checkpoint on a set of images.

    Args:
        checkpoint_path (str): Path to the model checkpoint file.
        image_dir (str): Path to the directory containing images.
        output_dir (str): Path to the directory where visualized images will be saved.
        dataset_name (str, optional): Name of the dataset for metadata. Defaults to "graffiti_validation".
    """

    # Set up Detectron2 configuration
    cfg = get_cfg()
    cfg.merge_from_file(model_zoo.get_config_file("COCO-Detection/faster_rcnn_R_101_FPN_3x.yaml"))
    cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5  # Set threshold for inference
    cfg.MODEL.ROI_HEADS.NUM_CLASSES = 1  # One class: graffiti
    cfg.MODEL.WEIGHTS = checkpoint_path
    cfg.DATASETS.TEST = (dataset_name,) #Set the test dataset.

    # Create predictor
    predictor = DefaultPredictor(cfg)

    # Get metadata
    metadata = MetadataCatalog.get(dataset_name)

    # Get list of image files
    image_files = [f for f in os.listdir(image_dir) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]

    # Create output directory if it doesn't exist
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # Visualize predictions for each image
    for image_file in image_files:
        image_path = os.path.join(image_dir, image_file)
        image = cv2.imread(image_path)
        if image is None:
            print(f"Error: Could not read image {image_path}")
            continue

        outputs = predictor(image)
        v = Visualizer(image[:, :, ::-1], metadata=metadata, scale=1.0)
        out = v.draw_instance_predictions(outputs["instances"].to("cpu"))
        visualized_image = out.get_image()[:, :, ::-1]

        output_path = os.path.join(output_dir, f"visualized_{image_file}")
        cv2.imwrite(output_path, visualized_image)
        print(f"Visualized predictions saved to {output_path}")

if __name__ == "__main__":
    # Example usage:
    checkpoint_path = "./Training Phase/third_train_output/model_0009999.pth" #Change this to the checkpoint you wish to examine.
    image_dir = "datasets/Validation/images" #Change this to the validation image directory.
    output_dir = "./visualized_predictions"
    visualize_predictions(checkpoint_path, image_dir, output_dir)